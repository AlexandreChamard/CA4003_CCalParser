
options
{
IGNORE_CASE = true;
}

PARSER_BEGIN(SyntaxChecker)

//////////////////
///    MAIN    ///
//////////////////
public class SyntaxChecker {
    static void help() {
            System.out.println("");
            System.out.println("USAGE:");
            System.out.println("\tjava SyntaxChecker [inputfile.ccal] [--debug [Expression | Condition]]");
            System.out.println("");
            System.out.println("  -h --help:\tshow help.");
            System.out.println("  --debug:\tparse only the given type.");
            System.out.println("");
    }

    static int parseArgs(String[] args) {
        if (args.length == 0)
            return 1; // get input from prompt
        if (args[0].equals("-h") || args[0].equals("--help"))
            return 4; // show help
        if (args.length == 1)
            return 3; // default program
        if (args.length == 2 && args[0].equals("--debug"))
            return 0; // get input from prompt + use debug feature
        if (args.length == 3 && args[1].equals("--debug"))
            return 2; // use debug feature
        return -1; // show help and return 2
    }

    static void invalidArgument(String msg) {
        System.out.println("Error: "+msg);
        help();
        System.exit(2);
    }

    public static void main(String[] args) {
        SyntaxChecker parser;
        String mod = "Program";

        switch (parseArgs(args)) {
            case 0: // get input from prompt + use debug feature
                mod = args[1];
            case 1: // get input from prompt
                System.out.println("SLP Parser: Reading from standard input...");
                parser = new SyntaxChecker(System.in);
                break;
            case 2: // use debug feature
                mod = args[2];
            case 3: // default program
                try {
                    parser = new SyntaxChecker(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("SLP Parser: File " + args[0] + " not found.");
                    System.exit(1);
                    return; // avoid error msg
                }
                break;
            case 4: // show help
                help();
                return;
            default: // invalid arguments
                invalidArgument("invalid arguments.");
                return; // avoid error msg
        }
        try {
            Expression e;
            switch (mod) {
                case "Program":
                    e = parser.Program();
                    break;
                case "Condition":
                    e = parser.PCondition();
                    break;
                case "Expression":
                    e = parser.PExpression();
                    break;
                default:
                    invalidArgument("invalid debug mod.");
                    return; // avoid error msg
            }
            System.out.println(e.toString(new JsonShowHelper()));
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
            System.exit(1);
        }
    }
}

PARSER_END(SyntaxChecker)

TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

SKIP : { /* COMMENTS */
    <"//" (~["\r", "\n"])*>
|   "/*" { ++commentNesting; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { ++commentNesting; }
|   "*/" { --commentNesting; if (commentNesting == 0) SwitchTo(DEFAULT); }
|   <~[]>
}

TOKEN: {
    <LP: "("> | <RP: ")">
|   <LB: "{"> | <RB: "}">
|   <ADD_OP: "+">
|   <SUB_OP: "-">
|   <COMP_OP: "==" | "!=">
|   <COMP_NUM_OP: "<" | "<=" | ">" | ">=">
|   <LOGI_OP: "&&" | "||">
|   <NOT_OP: "~">
|   <EQ_OP: "=">
|   <COL: ":">
|   <SEMIC: ";">
|   <BOOL_LIT:"true" | "false">
|   <VAR_MOD: "var" | "const">
|   <VOID: "void">
|   <VAR_TYPE: "boolean" | "integer">
|   <MAIN: "main">
|   <IF: "if">
|   <ELSE: "else">
|   <WHILE: "while">
|   <SK: "skip">
|   <RET: "return">
|   <NUM: (["1"-"9"] (["0"-"9"])* | "0")>
|   <IDENTIFIER: ["a"-"z"] (["a"-"z"] | ["0"-"9"] | "_")*>
}

/**
ENTRY POINT
<Program> ::= <Condition> <EOF>
 */
Expression Program(): {
    SymbolTracker st = SymbolTracker.getInstance();
    Expression e;

    st.newBlock();
}
{
    e = Condition() <EOF> { st.deleteBlock(); return e; }
}

/**
subject condition
<PCondition> ::= <Condition> <EOF>
 */
Expression PCondition(): {
    Expression e;
}
{
    e = Condition() {
        if (e.getType() != Type.BOOLEAN || e.isLiteral() == true)
            throw new ParseException("invalid condition.");
        return e;
    }
}

/**
subject Expression
<PExpression> ::= <Expression> <EOF>
 */
Expression PExpression(): {
    Expression e;
}
{
    e = Expression() {
        Type t = e.getType();
        if ((t != Type.INTEGER && t != Type.BOOLEAN)
        || (t == Type.BOOLEAN && e.isLiteral() == false))
            throw new ParseException("invalid expression.");
        return e;
    }
}


/**
<Condition> ::= <Condition1> <Condition_>
 */
Expression Condition(): {
    Expression e1, e2;
}
{
    e1 = Condition1() e2 = Condition_(e1) { return e2; }
}

/**
<Condition1> ::= ~ <Comparison>
<Condition1> ::= <Comparison>
 */
Expression Condition1(): {
    Expression e1;
}
{
    <NOT_OP> e1 = Comparison() { return new UnaryExpression("~", e1); }
|    e1 = Comparison() { return e1; }
}

/**
<Condition_> ::= && <Comparison> <Condition_>
<Condition_> ::= || <Comparison> <Condition_>
 */
Expression Condition_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <LOGI_OP> e2 = Comparison() ef = Condition_(new LogicalExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}


/**
<Comparison> ::= <NumComparison> <Comparison_>
 */
Expression Comparison(): {
    Expression e1, e2;
}
{
    e1 = NumComparison() e2 = Comparison_(e1) { return e2; }
}

/**
<Comparison_> ::= == <NumComparison> <Comparison_>
<Comparison_> ::= != <NumComparison> <Comparison_>
 */
Expression Comparison_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <COMP_OP> e2 = NumComparison() ef = Comparison_(new BinaryExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<NumComparison> ::= <Expression> <NumComparison_>
 */
Expression NumComparison(): {
    Expression e1, e2;
}
{
    e1 = Expression() e2 = NumComparison_(e1) { return e2; }
}

/**
<NumComparison_> ::= <  <NumComparison> <NumComparison_>
<NumComparison_> ::= <= <NumComparison> <NumComparison_>
<NumComparison_> ::= >  <NumComparison> <NumComparison_>
<NumComparison_> ::= >= <NumComparison> <NumComparison_>
 */
Expression NumComparison_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <COMP_NUM_OP> e2 = Expression() ef = NumComparison_(new BinaryExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<Expression> ::= <Fragment> <Expression_>
 */
Expression Expression(): {
    Expression e1, e2;
}
{
    e1 = Fragment() e2 = Expression_(e1) { return e2; }
}

/**
<Expression_> ::= + <Fragment> <Expression_>
<Expression_> ::= - <Fragment> <Expression_>
 */
Expression Expression_(Expression e1): {
    Expression e2, ef;
}
{
    <ADD_OP> e2 = Fragment() ef = Expression_(new BinaryExpression("+", e1, e2)) { return ef;}
|   <SUB_OP> e2 = Fragment() ef = Expression_(new BinaryExpression("-", e1, e2)) { return ef;}
|   { return e1; }
}

/**
<Fragment> ::= <SubFragment>
<Fragment> ::= - <SubFragment>
<Fragment> ::= Bool_Lit
<Fragment> ::= ( <Condition> )
 */
Expression Fragment(): {
    Token t;
    Expression e;
}
{
    e = SubFragment()           { return e; }
|   <SUB_OP> e = SubFragment()  { return new UnaryExpression("-", e); }
|   t = <BOOL_LIT>              { return new Bool(t.toString().equals("true")); }
|   <LP> e = Condition() <RP>   { return e; }
}

/**
<SubFragment> ::= Identifier
<SubFragment> ::= Number
 */
Expression SubFragment(): {
    Token t;
}
{
    t = <IDENTIFIER>            { return new Identifier(t); }
|   t = <NUM>                   { return new Number(t.toString()); }
}
