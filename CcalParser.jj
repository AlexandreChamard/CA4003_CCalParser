/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CcalParser.jj */
/*@egen*/
options
{
    IGNORE_CASE = true;
               
                   
}

PARSER_BEGIN(CcalParser)

import java.io.*;
import java.util.*;

public class CcalParser/*@bgen(jjtree)*/implements CcalParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCcalParserState jjtree = new JJTCcalParserState();

/*@egen*/
    static void help() {
            System.out.println("");
            System.out.println("USAGE:");
            System.out.println("\tjava CcalParser [inputfile.ccal] [--debug [Program | Condition | Expression | Identifier]]");
            System.out.println("");
            System.out.println("  -h --help:\tshow help.");
            System.out.println("  --debug:\tparse only the given type.");
            System.out.println("");
    }

    static int parseArgs(String[] args) {
        if (args.length == 0)
            return 1; // get input from prompt
        if (args[0].equals("-h") || args[0].equals("--help"))
            return 4; // show help
        if (args.length == 1)
            return 3; // default program
        if (args.length == 2 && args[0].equals("--debug"))
            return 0; // get input from prompt + use debug feature
        if (args.length == 3 && args[1].equals("--debug"))
            return 2; // use debug feature
        return -1; // show help and return 2
    }

    static void invalidArgument(String msg) {
        System.out.println("Error: "+msg);
        help();
        System.exit(2);
    }

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        if (args.length < 1) {
            System.out.println("Please pass in the filename.");
            System.exit(1);
        }
        CcalParser parser = new CcalParser(new FileInputStream(args[0]));
        SimpleNode root = parser.program();
        System.out.println();
        System.out.println("Program:");
        PrintVisitor pv = new PrintVisitor();
        root.jjtAccept(pv, null);
        System.out.println();
        // System.out.println("Type Checking:");
        // TypeCheckVisitor tc = new TypeCheckVisitor();
        // root.jjtAccept(tc, ST);
    }
}

PARSER_END(CcalParser)

TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

SKIP : { /* COMMENTS */
    <"//" (~["\r", "\n"])*>
|   "/*" { ++commentNesting; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { ++commentNesting; }
|   "*/" { --commentNesting; if (commentNesting == 0) SwitchTo(DEFAULT); }
|   <~[]>
}

TOKEN: {
    "(" | ")"
|   "{" | "}"
|   "+"
|   "-"
|   <COMP_OP: "==" | "!=">
|   <COMP_NUM_OP: "<" | "<=" | ">" | ">=">
|   <LOGI_OP: "&&" | "||">
|   "~"
|   "="
|   ","
|   ":"
|   ";"
|   <BOOL_LIT: "true" | "false">
|   "var"
|   "const"
|   "void"
|   <VAR_TYPE: "boolean" | "integer">
|   "main"
|   "if"
|   "else"
|   "while"
|   "skip"
|   "return"
|   <NUM: (["1"-"9"] (["0"-"9"])* | "0")>
|   <IDENTIFIER: ["a"-"z"] (["a"-"z"] | ["0"-"9"] | "_")*>
}

SimpleNode program() : {/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
    try {
/*@egen*/
    Stms() <EOF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stms()       : {}
{
    (SimpleStm() ";" [/*@bgen(jjtree) #Stms( 2) */
                      {
                        ASTStms jjtn001 = new ASTStms(JJTSTMS);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/Stms()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         ] )
}

void SimpleStm()       : {}
{
    (expression())
|   (declaration())
}

void declaration()       : {Token t; String name;}
{
    t = <VAR_TYPE> name = identifier()/*@bgen(jjtree) #Decl( 1) */
                                       {
                                         ASTDecl jjtn001 = new ASTDecl(JJTDECL);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                         jjtc001 = false;
                                       }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  1);
                                         }
                                       }
/*@egen*/         
}

void expression()       : {Token t;}
{
    term()
    (
        (
            t = "+" term()/*@bgen(jjtree) #Add_op( 2) */
                           {
                             ASTAdd_op jjtn001 = new ASTAdd_op(JJTADD_OP);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtc001 = false;
                           }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/           
        |   t = "-" term()/*@bgen(jjtree) #Add_op( 2) */
                           {
                             ASTAdd_op jjtn002 = new ASTAdd_op(JJTADD_OP);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002,  2);
                             jjtc002 = false;
                           }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  2);
                             }
                           }
/*@egen*/           
        )
    |   (
            t = <LOGI_OP> term()/*@bgen(jjtree) #Bool_op( 2) */
                                 {
                                   ASTBool_op jjtn003 = new ASTBool_op(JJTBOOL_OP);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                   jjtc003 = false;
                                 }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
                                 }
/*@egen*/            
        )
    )*
}

void term()       : {Token t;}
{
    "~"/*@bgen(jjtree) #Not_op( 1) */
        {
          ASTNot_op jjtn001 = new ASTNot_op(JJTNOT_OP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ factor()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/           
|   factor()
    (
        t = "*" factor()/*@bgen(jjtree) #Mult_op( 2) */
                         {
                           ASTMult_op jjtn002 = new ASTMult_op(JJTMULT_OP);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002,  2);
                           jjtc002 = false;
                         }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/            
    )*
}

void factor()       : {}
{
    (
        "("/*@bgen(jjtree) #Exp( 1) */
            {
              ASTExp jjtn001 = new ASTExp(JJTEXP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/         ")"
    |   number()
    |   identifier()
    )
}

void number() : {/*@bgen(jjtree) number */
                 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) number */
    try {
/*@egen*/
    t = <NUM>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void identifier() : {/*@bgen(jjtree) identifier */
                     ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
