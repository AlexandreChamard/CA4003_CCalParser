========================
S -> id = E;

gen(get(id.lexeme) '=' E.addr)

========================
S -> L = E

gen(L.addr.base '[' L.addr ']' '=' E.addr)

========================
E -> E1 op E2

gen(E.addr '=' E1.addr op E2.addr)

========================
E -> id

E.addr = get(id.lexeme)

========================
E -> L

E.addr = new Temp()
gen(E.addr '=' L.array.base '[' L.addr ']')

========================
L -> id[E]

L.array = get(id.lexeme)
L.type = L.array.type.elem
L.addr = new temp()
gen(L.addr '=' E.addr '*' L.type.width)

========================
L -> L1[E]

L.array = L1.array
L.type = L1.type.elem
t = new Temp()
L.addr = new Temp()
gen(t '=' E.addr '*' L.type.width)
gen(L.addr '=' L1.addr '+' t)

========================
B -> B1 || B2

B1.true = B.true
B1.false = newlabel()
B2.true = B.true
B2.false = B.false
B1.code || label(B1.false) || B2.code

========================
B -> B1 && B2

B1.true = newlabel()
B1.false = B.false
B2.true = B.true
B2.false = B.false
B1.code || label(B1.true) || B2.code

========================
B -> !B1

B1.true = B.false
B1.false = B.true
B.code = B1.code

========================
B -> E1 rel E2

B.code = E1.code || E2.code
|| gen('if' E1.addr rel E2.addr 'goto' B.true)
|| gen('goto' B.false)

========================
B -> true

B.code = gen('goto' B.true)

========================
B -> false

B.code = gen('goto' B.false)

========================
P -> S

S.next = newlabel()
P.code = S.code || label(S.next)

========================
S -> assign

S.code = assign.code

========================
S -> if ( B ) S1

S.true = newlabel()
S.false = newlabel()
B.code || label(S1.true) || S1.code || label(S.false)


B.true = newlabel()
B.false = S1.next = S.next
S.code = B.code || label(B.true) || S1.code

========================
S -> if ( B ) S1 else S2

B.true = newlabel()
B.false = newlabel()
S1.next = S2.next = S.next
S.code = B.code || label(B.true) || S1.code  || gen('goto' S.next) || label(B.false) || S2.code

========================
S -> while ( B ) S1

begin = newlabel()
B.true = newlabel()
B.false = S.next
S1.next = begin
S.code = labe(begin) || B.code || label(B.true) || S1.code || gen('goto' begin)

========================
S -> S1 S2

S1.next = newlabel()
S2.next = S.next
S1.code || label(S1.next) || S2.code


==============================================


S = Statement {
    .code = String representing the code
    .next = label
}

E = Expression {
    .code = String representing the code
    .addr = name of the var (can be tmp)
}

B = BooleanCondition {
    .code = String representing the code
    .true = label
    .false = label
}

P = Program {
    .code = String representing the code
}
