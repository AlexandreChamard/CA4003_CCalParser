
options
{
IGNORE_CASE = true;
}

PARSER_BEGIN(CcalAstGenerator)

import java.util.ArrayList;

//////////////////
///    MAIN    ///
//////////////////
public class CcalAstGenerator {
    static void help() {
            System.out.println("");
            System.out.println("USAGE:");
            System.out.println("\tjava CcalAstGenerator [inputfile.ccal] [--debug [Program | Condition | Expression | Identifier]]");
            System.out.println("");
            System.out.println("  -h --help:\tshow help.");
            System.out.println("  --debug:\tparse only the given type.");
            System.out.println("");
    }

    static int parseArgs(String[] args) {
        if (args.length == 0)
            return 1; // get input from prompt
        if (args[0].equals("-h") || args[0].equals("--help"))
            return 4; // show help
        if (args.length == 1)
            return 3; // default program
        if (args.length == 2 && args[0].equals("--debug"))
            return 0; // get input from prompt + use debug feature
        if (args.length == 3 && args[1].equals("--debug"))
            return 2; // use debug feature
        return -1; // show help and return 2
    }

    static void invalidArgument(String msg) {
        System.out.println("Error: "+msg);
        help();
        System.exit(2);
    }

    public static void main(String[] args) {
        CcalAstGenerator parser;
        String mod = "Program";

        switch (parseArgs(args)) {
            case 0: // get input from prompt + use debug feature
                mod = args[1];
            case 1: // get input from prompt
                System.out.println("SLP Parser: Reading from standard input...");
                parser = new CcalAstGenerator(System.in);
                break;
            case 2: // use debug feature
                mod = args[2];
            case 3: // default program
                try {
                    parser = new CcalAstGenerator(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("SLP Parser: File " + args[0] + " not found.");
                    System.exit(1);
                    return; // avoid error msg
                }
                break;
            case 4: // show help
                help();
                return;
            default: // invalid arguments
                invalidArgument("invalid arguments.");
                return; // avoid error msg
        }
        try {
            ASTNode e;
            switch (mod) {
                case "Program":
                    e = parser.Program();
                    break;
                case "Condition":
                    e = parser.DCondition();
                    break;
                case "Expression":
                    e = parser.DExpression();
                    break;
                case "Identifier":
                    e = parser.SubFragment();
                    break;
                default:
                    invalidArgument("invalid debug mod.");
                    return; // avoid error msg
            }
            System.out.println(e.accept(new JsonVisitor(), null));
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
            System.exit(1);
        }
    }
}

PARSER_END(CcalAstGenerator)

TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

SKIP : { /* COMMENTS */
    <"//" (~["\r", "\n"])*>
|   "/*" { ++commentNesting; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { ++commentNesting; }
|   "*/" { --commentNesting; if (commentNesting == 0) SwitchTo(DEFAULT); }
|   <~[]>
}

TOKEN: {
    "(" | ")"
|   "{" | "}"
|   "+"
|   "-"
|   <COMP_OP: "==" | "!=">
|   <COMP_NUM_OP: "<" | "<=" | ">" | ">=">
|   <LOGI_OP: "&&" | "||">
|   "~"
|   "="
|   ","
|   ":"
|   ";"
|   <BOOL_LIT: "true" | "false">
|   "var"
|   "const"
|   "void"
|   <VAR_TYPE: "boolean" | "integer">
|   "main"
|   "if"
|   "else"
|   "while"
|   "skip"
|   "return"
|   <NUM: (["1"-"9"] (["0"-"9"])* | "0")>
|   <IDENTIFIER: ["a"-"z"] (["a"-"z"] | ["0"-"9"] | "_")*>
}

/**
ENTRY POINT
<program> ::= <decl_list> <function_list> <main> <EOF>
 */
Program Program(): {
    StatementBlock dl, fl;
    MainFunction mf;
    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    dl = DeclList()
    fl = FunctionList()
    mf = MainFunc()
    <EOF> {
        dl.addBack(fl);
        dl.addBack(mf);
        st.deleteBlock();
        return new Program(dl);
    }
}

/**
<decl_list> ::= <decl> ; <decl_list>
<decl_list> ::= ɛ
 */
StatementBlock DeclList(): {
    Statement d;
    StatementBlock ds;
}
{
    d = Decl() ";" ds = DeclList()      { ds.addFront(d); return ds; }
|                                       { return new StatementBlock(); }
}

/**
<decl> ::= <var_decl>
<decl> ::= <const_decl>
 */
VariableDeclaration Decl(): {
    VariableDeclaration v;
}
{
    v = VarDecl()                       { return v; }
|   v = ConstDecl()                     { return v; }
}

/**
<var_decl> ::= var identifier : (integer | boolean)
 */
VariableDeclaration VarDecl(): {
    Token id, t;
}
{
    "var" id = <IDENTIFIER> ":" t = <VAR_TYPE> { return new VariableDeclaration(id, t); }
}

/**
<const_decl> ::= const identifier : (integer | boolean) = <Expression>
 */
VariableDeclaration ConstDecl(): {
    Token id, t;
    Expression e;
}
{
    "const" id = <IDENTIFIER> ":" t = <VAR_TYPE> "=" e = PExpression() { return new VariableDeclaration(id, t, e); }
}

/**
<function_list> ::= <function> <function_list>
<function_list> ::= ɛ
 */
StatementBlock FunctionList(): {
    Statement f;
    StatementBlock fs;
}
{
    f = Function() fs = FunctionList()  {fs.addFront(f); return fs; }
|                                       { return new StatementBlock(); }
}

/**
<function> ::= (integer | boolean) identifier \( <param_list> \) { <decl_list> <statement_block> return \( <expression> \) ; }
<function> ::= void identifier \( <param_list> \) { <decl_list> <statement_block> return \( \) ; }
 */
FunctionDeclaration Function(): {
    Token t, id;
    Symbol s;
    ArrayList<VariableDeclaration> ps;
    StatementBlock dl, sb;
    Expression r;

    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    t = <VAR_TYPE> id = <IDENTIFIER> "(" ps = ParamList() ")"
    { s = new Symbol(id.toString(), t.toString(), ps, "function"); st.addSymbol(s); } // create the symbol of the function for recursive call.
    "{" 
        dl = DeclList()
        sb = StatementBlock()
        "return" "(" r = PExpression() ")" ";"
    "}" {
        if (r.getType() != Typeable.stringToType(t.toString()))
            throw new ParseException("return type does not match with function type.");
        dl.addBack(sb);
        dl.addBack(new ReturnStatement(r));
        st.deleteBlock(); // because the function symbol was create IN the block, we need to push it again (next line).
        return new FunctionDeclaration(id, s, ps, dl);
    }

|   "void" id = <IDENTIFIER> "(" ps = ParamList() ")"
    { s = new Symbol(id.toString(), "void", ps, "function"); st.addSymbol(s); } // create the symbol of the function for recursive call.
    "{"
        dl = DeclList()
        sb = StatementBlock()
        "return" "(" ")" ";"
    "}" {
        dl.addBack(sb);
        st.deleteBlock(); // because the function symbol was create IN the block, we need to push it again (next line).
        return new FunctionDeclaration(id, s, ps, dl);
    }
}

/**
<main> ::= main { <decl_list> <statement_block> }
 */
MainFunction MainFunc(): {
    StatementBlock dl, sb;

    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    "main" "{"
        dl = DeclList()
        sb = StatementBlock()
    "}" {
        dl.addBack(sb);
        st.deleteBlock();
        return new MainFunction(dl);
    }
}

/**
<param_list> ::= <nemp_param_list>
<param_list> ::= ɛ
 */
ArrayList<VariableDeclaration> ParamList(): {
    ArrayList<VariableDeclaration> ps;
}
{
    ps = NempParameterList()    { return ps; }
|                               { return new ArrayList<VariableDeclaration>(); }
}

/**
<nemp_param_list> ::= identifier : (integer | boolean) <nemp_param_list1>
 */
ArrayList<VariableDeclaration> NempParameterList(): {
    Token id, t;
    ArrayList<VariableDeclaration> ps;
}
{
    id = <IDENTIFIER> ":" t = <VAR_TYPE> ps = NempParameterList1() { ps.add(0, new VariableDeclaration(id, t)); return ps; }
}

/**
<nemp_param_list1> ::= , <nemp_param_list1>
<nemp_param_list1> ::= ɛ
 */
ArrayList<VariableDeclaration> NempParameterList1(): {
    ArrayList<VariableDeclaration> ps;
}
{
    "," ps = NempParameterList()    { return ps; }
|                                   { return new ArrayList<VariableDeclaration>(); }
}

/**
<statement_block> ::= <statement> <statement_block>
<statement_block> ::= ɛ
 */
StatementBlock StatementBlock(): {
    StatementBlock sb;
    Statement s;

    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    s = Statement() sb = StatementBlock()   { sb.addFront(s); st.deleteBlock(); return sb; }
|                                           { st.deleteBlock(); return new StatementBlock(); }
}

/**
<statement> ::= identifier <statement1>
<statement> ::= { <statement_block> }
<statement> ::= <if_statement>
<statement> ::= <while_statement>
<statement> ::= <skip_statement>
 */
Statement Statement(): {
    Token id;
    Statement s;
}
{
    id = <IDENTIFIER> s = Statement1(new Identifier(id))    { return s; }
|   "{" s = StatementBlock() "}"                            { return s; }
|   s = IfStatement()                                       { return s; }
|   s = WhileStatement()                                    { return s; }
|   "skip" ";"                                              { return new SkipStatement(); }
}

/**
<statement1> ::= = <expression> ;
<statement1> ::= = \( <arg_list> \) ;
 */
Statement Statement1(Identifier id): {
    Expression e;
    ArrayList<Identifier> args;
}
{
    "=" e = PExpression() ";"        { return new ExpressionStatement(new AssignmentExpression(id, e)); }
|   "(" args = ArgList() ")" ";"    { return new ExpressionStatement(new CallExpression(id, args)); }
}

/**
<if_statement> ::= if <condition> { <statement_block } else { <statement_block> }
 */
IfStatement IfStatement(): {
    Expression c;
    StatementBlock sb, sb1;

    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    "if" c = PCondition() "{" sb = StatementBlock() "}" "else" "{" sb1 = StatementBlock() "}"    { st.deleteBlock(); return new IfStatement(c, sb, sb1); }
}

/**
<while_statement> ::= while <condition> { <statement_block> }
 */
WhileStatement WhileStatement(): {
    Expression c;
    StatementBlock sb;

    SymbolTracker st = SymbolTracker.getInstance();
    st.newBlock();
}
{
    "while" c = PCondition() "{" sb = StatementBlock() "}"  { st.deleteBlock(); return new WhileStatement(c, sb); }
}

/**
<arg_list> ::= <nemp_arg_list>
<arg_list> ::= ɛ
 */
ArrayList<Identifier> ArgList(): {
    ArrayList<Identifier> args;
}
{
    args = NempArgList()    { return args; }
|                           { return new ArrayList<Identifier>(); }
}

/**
<arg_list> ::= identifier <nemp_arg_list1>
 */
ArrayList<Identifier> NempArgList(): {
    Token arg;
    ArrayList<Identifier> args;
}
{
    arg = <IDENTIFIER> args = NempArgList1()    { args.add(0, new Identifier(arg)); return args; }
}

/**
<nemp_arg_list1> ::= , <nemp_arg_list>
 */
ArrayList<Identifier> NempArgList1(): {
    ArrayList<Identifier> args;
}
{
    "," args = NempArgList()    { return args;}
|                               { return new ArrayList<Identifier>(); }
}

/**
<condition> ::= <condition>
subject condition
does not really exist. Used only to check if <condition> is valid.
 */
Expression PCondition(): {
    Expression e;
}
{
    e = Condition() {
        if (e.getType() != Type.BOOLEAN || e.isLiteral() == true)
            throw new ParseException("invalid condition.");
        return e;
    }
}

/**
<expression> ::= <expression>
subject Expression
does not really exist. Used only to check if <expression> is valid.
 */
Expression PExpression(): {
    Expression e;
}
{
    e = Expression() {
        Type t = e.getType();
        if ((t != Type.INTEGER && t != Type.BOOLEAN)
        || (t == Type.BOOLEAN && e.isLiteral() == false))
            throw new ParseException("invalid expression.");
        return e;
    }
}


/**
<condition> ::= <condition1> <condition_>
 */
Expression Condition(): {
    Expression e1, e2;
}
{
    e1 = Condition1() e2 = Condition_(e1) { return e2; }
}

/**
<condition1> ::= <comparison>
 */
Expression Condition1(): {
    Expression e1;
}
{
    e1 = Comparison() { return e1; }
}

/**
<condition_> ::= && <comparison> <condition_>
<condition_> ::= || <comparison> <condition_>
<condition_> ::= ɛ
 */
Expression Condition_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <LOGI_OP> e2 = Comparison() ef = Condition_(new LogicalExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}


/**
<comparison> ::= <num_comparison> <comparison_>
 */
Expression Comparison(): {
    Expression e1, e2;
}
{
    e1 = NumComparison() e2 = Comparison_(e1) { return e2; }
}

/**
<comparison_> ::= == <num_comparison> <comparison_>
<comparison_> ::= != <num_comparison> <comparison_>
<comparison_> ::= ɛ
 */
Expression Comparison_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <COMP_OP> e2 = NumComparison() ef = Comparison_(new BinaryExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<num_comparison> ::= <expression> <num_comparison_>
 */
Expression NumComparison(): {
    Expression e1, e2;
}
{
    e1 = Expression() e2 = NumComparison_(e1) { return e2; }
}

/**
<num_comparison_> ::= <  <num_comparison> <num_comparison_>
<num_comparison_> ::= <= <num_comparison> <num_comparison_>
<num_comparison_> ::= >  <num_comparison> <num_comparison_>
<num_comparison_> ::= >= <num_comparison> <num_comparison_>
<num_comparison_> ::= ɛ
 */
Expression NumComparison_(Expression e1): {
    Token t;
    Expression e2, ef;
}
{
    t = <COMP_NUM_OP> e2 = Expression() ef = NumComparison_(new BinaryExpression(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<expression> ::= <fragment> <expression_>
 */
Expression Expression(): {
    Expression e1, e2;
}
{
    e1 = Fragment() e2 = Expression_(e1) { return e2; }
}

/**
<expression_> ::= + <fragment> <expression_>
<expression_> ::= - <fragment> <expression_>
<expression_> ::= ɛ
 */
Expression Expression_(Expression e1): {
    Expression e2, ef;
}
{
    "+" e2 = Fragment() ef = Expression_(new BinaryExpression("+", e1, e2)) { return ef;}
|   "-" e2 = Fragment() ef = Expression_(new BinaryExpression("-", e1, e2)) { return ef;}
|   { return e1; }
}

/**
<fragment> ::= <sub_fragment>
<fragment> ::= (true | false)
<fragment> ::= - <sub_fragment>
<fragment> ::= ~ <fragment>
<fragment> ::= \( <condition> \)
 */
Expression Fragment(): {
    Token t;
    Expression e;
}
{
    t = <IDENTIFIER> e = SubIdentifer(new Identifier(t))    { return e; }
|   t = <NUM>                                               { return new Number(t.toString()); }
|   t = <BOOL_LIT>                                          { return new Bool(t.toString().equals("true")); }
|   "-" e = SubFragment()                                   { return new UnaryExpression("-", e); }
|   "~" e = Fragment()                                      { return new UnaryExpression("~", e); }
|   "(" e = Condition() ")"                                 { return e; }
}

/**
<sub_fragment> ::= identifier
<sub_fragment> ::= number
 */
Expression SubFragment(): {
    Token t;
}
{
    t = <IDENTIFIER>     { return new Identifier(t); }
|   t = <NUM>            { return new Number(t.toString()); }
}

Expression SubIdentifer(Identifier id): {
    ArrayList<Identifier> args;
}
{
    "(" args = ArgList() ")"    { return new CallExpression(id, args); }
|                               { return id; }
}

/**
DEBUG
 */
Expression DExpression(): {
    Expression e;
}
{
    e = PExpression() <EOF> { return e; }
}

Expression DCondition(): {
    Expression e;
}
{
    e = PCondition() <EOF> { return e; }
}