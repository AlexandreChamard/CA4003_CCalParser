
options
{
IGNORE_CASE = true;
}

PARSER_BEGIN(SyntaxChecker)

import java.util.ArrayList;

interface Show {
    String toString();
}


enum Type {
    INVALID,
    VOID,
    INTEGER,
    BOOLEAN
}

interface Typeable {
    Type getType();
    ArrayList<Type> getComplexType();
    boolean isLit();
}


abstract class ENode implements Show, Typeable {
    public ArrayList<Type> getComplexType() { return new ArrayList(); }
    public boolean isLit() { return false; }

    public void checkValidity() throws ParseException {
        if (getType() == Type.INVALID)
            throw new ParseException("some types is invalid.");
    }
}

class BinaryExpr extends ENode {
    private String type;
    private ENode e1, e2;

    BinaryExpr(String _type, ENode _e1, ENode _e2) throws ParseException {
        type = _type;
        e1 = _e1;
        e2 = _e2;
        checkValidity();
    }

    public Type getType() {
        Type t1 = e1.getType(), t2 = e2.getType();

        if (t1 != Type.INVALID && t1 != Type.VOID && t1 == t2)
            return t1;

        switch (type) {
            case "&&":
            case "||":
                if (t1 == Type.BOOLEAN && t1 == t2)
                    return Type.BOOLEAN;
                return Type.INVALID;
            case "<":
            case "<=":
            case ">":
            case ">=":
            case "+":
            case "-":
                if (t1 == Type.INTEGER && t1 == t2)
                    return Type.INTEGER;
                return Type.INVALID;
            case "==":
            case "!=":
            case "=":
                if (t1 == t2)
                    return t1;
                return Type.INVALID;
            default:
                return t2;
        }
    }

    public String toString() {
        return type+"("+e1.toString()+", "+e2.toString()+")";
    }
}

class Num extends ENode {
    private String i;

    public Num(String _i) {
        i = _i;
    }

    public Type getType() {
        return Type.INTEGER;
    }

    public String toString() {
        return i;
    }
}

class Identifier extends ENode {
    private Token id;

    Identifier(Token _id) {
        id = _id;
    }

    public Type getType() {
        /** check in identifier hashtable */
        return Type.VOID;
    }

    public String toString() {
        return "id("+id.toString()+")";
    }
}

class UnaryNot extends ENode {
    private ENode e;

    UnaryNot(ENode _e) throws ParseException {
        e = _e;
        checkValidity();
    }

    public Type getType() {
        if (e.getType() == Type.BOOLEAN)
            return  Type.BOOLEAN;
        return Type.INVALID;
    }

    public String toString() {
        return "~("+e+")";
    }
}

class UnaryExpr extends ENode {
    private ENode e;

    UnaryExpr(ENode _e) throws ParseException {
        e = _e;
        checkValidity();
    }

    public Type getType() {
        if (e.getType() == Type.INTEGER)
            return  Type.INTEGER;
        return Type.INVALID;
    }

    public String toString() {
        return "-("+e+")";
    }
}

class BoolLit extends ENode {
    private boolean b;

    BoolLit(boolean _b) {
        b = _b;
    }

    public Type getType() {
        return Type.BOOLEAN;
    }

    public String toString() {
        return Boolean.toString(b);
    }
}

public class SyntaxChecker {
    public static void main(String[] args) {
        SyntaxChecker parser;

        if (args.length == 0) {
            System.out.println("SLP Parser: Reading from standard input . . .");
            parser = new SyntaxChecker(System.in);
        } else if (args.length == 1 && args[0].equals("-h") == false && args[0].equals("--help") == false) {
            try {
                parser = new SyntaxChecker(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("SLP Parser: File " + args[0] + " not found.");
                System.exit(1);
                return;
            }

        } else {

            System.out.println("");
            System.out.println("USAGE:");
            System.out.println("\tjava SyntaxChecker [inputfile.ccal]");
            System.out.println("");
            return;

        }

        try {
            ENode e = parser.Program();
            System.out.println(e.toString());
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
            System.exit(1);
        }
    }
}

PARSER_END(SyntaxChecker)

TOKEN_MGR_DECLS : {
    static int commentNesting = 0;
}

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

SKIP : { /* COMMENTS */
    <"//" (~["\r", "\n"])*>
|   "/*" { ++commentNesting; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { ++commentNesting; }
|   "*/" { --commentNesting; if (commentNesting == 0) SwitchTo(DEFAULT); }
|   <~[]>
}

TOKEN: {
    <LP: "("> | <RP: ")">
|   <LB: "{"> | <RB: "}">
|   <ADD_OP: "+">
|   <SUB_OP: "-">
|   <COMP_OP: "==" | "!=">
|   <COMP_NUM_OP: "<" | "<=" | ">" | ">=">
|   <BOOL_OP: "&&" | "||">
|   <NOT_OP: "~">
|   <EQ_OP: "=">
|   <COL: ":">
|   <SEMIC: ";">
|   <BOOL_LIT:"true" | "false">
|   <VAR_MOD: "var" | "const">
|   <VOID: "void">
|   <VAR_TYPE: "boolean" | "integer">
|   <MAIN: "main">
|   <IF: "if">
|   <ELSE: "else">
|   <WHILE: "while">
|   <SK: "skip">
|   <RET: "return">
|   <NUM: (["1"-"9"] (["0"-"9"])* | "0")>
|   <IDENTIFIER: ["a"-"z"] (["a"-"z"] | ["0"-"9"] | "_")*>
}

/**
ENTRY POINT
<Program> ::= <Condition>
 */
ENode Program(): {
    ENode e;
}
{
    e = Condition() <EOF> { return e; }
}


/**
<Condition> ::= <Condition1> <Condition_>
 */
ENode Condition(): {
    ENode e1, e2;
}
{
    e1 = Condition1() e2 = Condition_(e1) { return e2; }
}

/**
<Condition1> ::= ~ <Comparison>
<Condition1> ::= <Comparison>
 */
ENode Condition1(): {
    ENode e1;
}
{
    <NOT_OP> e1 = Comparison() { return new UnaryNot(e1); }
|    e1 = Comparison() { return e1; }
}

/**
<Condition_> ::= && <Comparison> <Condition_>
<Condition_> ::= || <Comparison> <Condition_>
 */
ENode Condition_(ENode e1): {
    Token t;
    ENode e2, ef;
}
{
    t = <BOOL_OP> e2 = Comparison() ef = Condition_(new BinaryExpr(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}


/**
<Comparison> ::= <NumComparison> <Comparison_>
 */
ENode Comparison(): {
    ENode e1, e2;
}
{
    e1 = NumComparison() e2 = Comparison_(e1) { return e2; }
}

/**
<Comparison_> ::= == <NumComparison> <Comparison_>
<Comparison_> ::= != <NumComparison> <Comparison_>
 */
ENode Comparison_(ENode e1): {
    Token t;
    ENode e2, ef;
}
{
    t = <COMP_OP> e2 = NumComparison() ef = Comparison_(new BinaryExpr(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<NumComparison> ::= <Expression> <NumComparison_>
 */
ENode NumComparison(): {
    ENode e1, e2;
}
{
    e1 = Expression() e2 = NumComparison_(e1) { return e2; }
}

/**
<NumComparison_> ::= <  <NumComparison> <NumComparison_>
<NumComparison_> ::= <= <NumComparison> <NumComparison_>
<NumComparison_> ::= >  <NumComparison> <NumComparison_>
<NumComparison_> ::= >= <NumComparison> <NumComparison_>
 */
ENode NumComparison_(ENode e1): {
    Token t;
    ENode e2, ef;
}
{
    t = <COMP_NUM_OP> e2 = Expression() ef = NumComparison_(new BinaryExpr(t.toString(), e1, e2)) { return ef; }
|   { return e1; }
}

/**
<Expression> ::= <Fragment> <Expression_>
 */
ENode Expression(): {
    ENode e1, e2;
}
{
    e1 = Fragment() e2 = Expression_(e1) { return e2; }
}

/**
<Expression_> ::= + <Fragment> <Expression_>
<Expression_> ::= - <Fragment> <Expression_>
 */
ENode Expression_(ENode e1): {
    ENode e2, ef;
}
{
    <ADD_OP> e2 = Fragment() ef = Expression_(new BinaryExpr("+", e1, e2)) { return ef;}
|   <SUB_OP> e2 = Fragment() ef = Expression_(new BinaryExpr("-", e1, e2)) { return ef;}
|   { return e1; }
}

/**
<Fragment> ::= <SubFragment>
<Fragment> ::= - <SubFragment>
<Fragment> ::= Bool_Lit
<Fragment> ::= ( <Condition> )
 */
ENode Fragment(): {
    Token t;
    ENode e;
}
{
    e = SubFragment()           { return e; }
|   <SUB_OP> e = SubFragment()  { return new UnaryExpr(e); }
|   t = <BOOL_LIT>              { return new BoolLit(t.toString().equals("true")); }
|   <LP> e = Condition() <RP>   { return e; }
}

/**
<SubFragment> ::= Identifier
<SubFragment> ::= Num
 */
ENode SubFragment(): {
    Token t;
}
{
    t = <IDENTIFIER>            { return new Identifier(t); }
|   t = <NUM>                   { return new Num(t.toString()); }
}
